// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/konflux-ci/integration-service/status (interfaces: ReporterInterface)
//
// Generated by this command:
//
//	mockgen -destination mock_reporter.go -package status github.com/konflux-ci/integration-service/status ReporterInterface
//

// Package status is a generated GoMock package.
package status

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/konflux-ci/application-api/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockReporterInterface is a mock of ReporterInterface interface.
type MockReporterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReporterInterfaceMockRecorder
}

// MockReporterInterfaceMockRecorder is the mock recorder for MockReporterInterface.
type MockReporterInterfaceMockRecorder struct {
	mock *MockReporterInterface
}

// NewMockReporterInterface creates a new mock instance.
func NewMockReporterInterface(ctrl *gomock.Controller) *MockReporterInterface {
	mock := &MockReporterInterface{ctrl: ctrl}
	mock.recorder = &MockReporterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporterInterface) EXPECT() *MockReporterInterfaceMockRecorder {
	return m.recorder
}

// Detect mocks base method.
func (m *MockReporterInterface) Detect(arg0 *v1alpha1.Snapshot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Detect indicates an expected call of Detect.
func (mr *MockReporterInterfaceMockRecorder) Detect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockReporterInterface)(nil).Detect), arg0)
}

// GetReporterName mocks base method.
func (m *MockReporterInterface) GetReporterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReporterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReporterName indicates an expected call of GetReporterName.
func (mr *MockReporterInterfaceMockRecorder) GetReporterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReporterName", reflect.TypeOf((*MockReporterInterface)(nil).GetReporterName))
}

// Initialize mocks base method.
func (m *MockReporterInterface) Initialize(arg0 context.Context, arg1 *v1alpha1.Snapshot) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return 0, ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockReporterInterfaceMockRecorder) Initialize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockReporterInterface)(nil).Initialize), arg0, arg1)
}

// ReportStatus mocks base method.
func (m *MockReporterInterface) ReportStatus(arg0 context.Context, arg1 TestReport) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return 200, ret0
}

// ReportStatus indicates an expected call of ReportStatus.
func (mr *MockReporterInterfaceMockRecorder) ReportStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStatus", reflect.TypeOf((*MockReporterInterface)(nil).ReportStatus), arg0, arg1)
}

func (mr *MockReporterInterface) ReturnCodeIsUnrecoverable(statusCode int) bool {
	mr.ctrl.T.Helper()
	return false
}

func (mr *MockReporterInterfaceMockRecorder) ReturnCodeIsUnrecoverable(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnCodeIsUnrecoverable", reflect.TypeOf((*MockReporterInterface)(nil).ReportStatus), arg0)

}
